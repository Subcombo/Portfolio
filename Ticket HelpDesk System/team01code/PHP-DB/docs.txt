WHAT IS THIS:

This file is a reference of the database api.php functions. Most of them are self explanatory, but some comments to what they do are needed. This is what this file is for.


DISCLAIMER:

The following funtion definitions are not valid PHP, they are here to specify exactly what to expect from the API.
Wherever I am using hashmaps, it's for conciseness, and so hashmap<emp_id employee, string name> would be realised as array("employee" => employee, "name" => name) in our code.
Sometimes types will be omitted, if obvious.

The declaration template is as follows: return_type 
I have decided to specify types in this spec, because we should do proper type checking in php, to avoid hard-to-detect problems further down the line.
Type names are abstract, not strictly PHP, so this will require some changes, however this file should only be treated as a reference.


TYPE NAMES USED:

 - timestamp         date & time
 - emp_id            user id (integer)
 - priority_level    (low, normal, high) = (2, 1, 0)
 - status            (open, closed, pending) = (1, 0, 2)
 - supported         (yes, no, unknown) = (1, 0, 2)
 - call_fields       enum: first_name, last_name, employee_id, phone_no, email, department, job_title, country
 - hardware_fields   enum: type, make, model, serial_no
 - software_fields   enum: name, version, registration_no

GLOSSARY:

 - user           operator or specialist
 - employee       anyone working for the company (including users)


VERY IMPORTANT:

No strict type checking on return, as sometimes null needs to be returned to signify an
error/no results -- an arrow symbol ``->'' used to show expected return type


``ENUM'' DEFINITIONS:

Ticket priority level
Ticket status levels, 1xx are used for filtering search results
  Specialist filtering additional values
  Permitted database values
Type of the logged in user, with exception of 0, which means invalid
Marks the support status of equipment


FIELDS (defined as strings) valid values:

 - call_fields       first_name, last_name, employee_id, phone_no, email, department, job_title, country
 - hardware_fields   type, make, model, serial_no
 - software_fields   name, version, registration_no


REMARKS/ASSUMPTIONS:

 - there are no piece of software and hardware that have the same id,
   i.e. you can uniquely identify equipment and its type by its id)


PROBLEM TAGS:

integer create_problem_tag(string name, integer parent_tag_id)

void delete_problem_tag(integer tag_id)

array<integer> search_problem_tags(string query)

hashmap<integer tag_id, string name, integer parent_tag_id> get_problem_tag(integer tag_id)


CALLS & PROBLEMS:

integer create_call(timestamp call_timestamp, emp_id operator, emp_id reporting_employee)

integer assign_ticket_to_call(integer ticket_id, integer call_id)

integer unbind_ticket_from_call(integer ticket_id, integer call_id)

integer create_ticket(integer call_id, priority_level priority, string notes, integer problem_tag_id)

void delete_call(integer call_id)

array<int> get_all_calls()

array<int> get_all_tickets()

void delete_ticket(integer ticket_id)

void amend_ticket(integer ticket_id, priority_level priority, string notes, int problem_tag_id, status status, emp_id specialist)
 * when given null, doesn't overwrite -- to delete specialist use -1

void assign_specialist_to_tag(integer tag_id, emp_id specialist)

void unbind_specialist_from_tag(integer tag_id, emp_id specialist)

void set_ticket_status(integer ticket_id, status status)

hashmap<integer call_id, timestamp call_timestamp, emp_id operator, emp_id reporting_employee> get_call(integer call_id)

hashmap<integer ticket_id,
      integer call_id,
      priority_level priority,
      string notes,
      integer problem_tag_id,
      emp_id assigned_specialist,
      status status,
      timestamp first_mentioned> get_ticket(integer ticket_id)



COMMENTS:

integer create_comment(integer ticket_id, timestamp comment_timestamp, string comment, emp_id reporting_user)

void delete_comment(integer comment_id)

hashmap<integer comment_id, integer ticket_id, timestamp comment_timestamp, string comment, emp_id reporting_user_id> get_comment(integer comment_id)


SOLUTIONS:

integer create_solution(integer ticket_id, emp_id authoring_specialist, string description, timestamp solution_timestamp)

void delete_solution(integer solution_id)

void amend_solution(integer solution_id, string description, timestamp solution_timestamp)

hashmap<integer solution_id, integer ticket_id, emp_id authoring_specialist, string description, timestamp solution_timestamp> get_solution(integer solution_id)

void assign_solution_to_specialist(integer solution_id, integer $specialist_id)

void assign_solution_to_ticket(integer solution_id, integer ticket_id)

void unbind_solution_from_ticket(integer solution_id, integer ticket_id)*


EQUIPMENT:

integer create_hardware_entry(string type, string make, string model, string serial_no, supported status = unknown)

integer create_software_entry(string name, string version, string registration_no, supported status = unknown)

void delete_equipment_entry(integer equipment_id, bool $hardware)*

void set_supported_status(integer equipment_id, supported status)

hashmap<integer equipment_id, string type, string make, string model, string serial_no, supported status> get_hardware_entry(integer equipment_id)

hashmap<integer equipment_id, string name, string version, string registration_no, supported status> get_software_entry(integer equipment_id)

array<hashmap<integer equipment_id, string type, string make, string model, string serial_no, supported status>> get_hardware_for_ticket(integer ticket_id)

array<hashmap<integer equipment_id, string name, string version, string registration_no, supported status>> get_software_for_ticket(integer equipment_id)

void amend_hardware_entry(integer equipment_id, string type, string make, string model, string serial_no, supported status = unknown)
 * if null -- no change

void amend_software_entry(integer equipment_id, string name, string version, string registration_no, supported status = unknown)
 * if null -- no change

void assign_equipment_to_ticket(integer ticket_id, integer equipment_id) /* does hw/sw resolution automaticaly */

void unbind_equipment_from_ticket(integer ticket_id, integer equipment_id) /* ditto */


SPECIALISTS:

void assign_specialist_to_ticket(integer specialist, integer ticket_id)

void unbind_specialist_from_ticket(integer specialist, integer ticket_id)

void create_unavailability(emp_id specialist, date day)

void delete_unavailabilies_for_specialist(emp_id specialist)

array<hashmap<date day, emp_id specialist>> get_unavailities()

array<hashmap<date day>> get_unavailities_for_specialist(emp_id specialist_id)


HR/ADMIN/MANAGEMENT STUFF:

emp_id create_employee(string job_title, string phone_no, string first_name, string last_name, string email, string dept_code)

void amend_employee(emp_id employee_id, string job_title, string phone_no, string first_name, string last_name, string email, string dept_code)
* as always -- null = no change

void delete_employee(emp_id employee_id)

hashmap<emp_id employee_id, string job_title, string phone_no, string first_name, string last_name, string email, string dept_code> 

get_employee(emp_id employee_id)

login_status get_user_type(integer employee_id)

void change_operator_password(integer employee_id, string password)

void change_specialist_password(integer employee_id, string password)

void make_employee_operator(integer employee_id, string username, string password)

void make_employee_specialist(integer employee_id, string username, string password)

void remove_operator_privileges(integer employee_id)

void remove_specialist_privileges(integer employee_id)

string create_department(string dept_code, string name, string city, string country, string locale_code)

void delete_department(string dept_code)

void amend_department(string dept_code, string name, string city, string country, string locale_code)
 * null -- no change

hashmap<string dept_code, string name, string city, string country, string locale_code> get_department(string dept_code)

array<string> get_all_departments()


HIGER-LEVEL/MISC:

array<hashmap<integer comment_id, integer ticket_id, timestamp comment_timestamp, string comment, emp_id reporting_user_id>> comments_on_problem(integer ticket_id)

array<hashmap<solution_id, name, description, timestamp, ticket_id, phone_no, email>> get_solutions_for_problem(integer ticket_id)

array<integer> get_problems_for_solution(integer solution_id)

array<integer> get_tickets_for_call(integer call_id)

array<hashmap<employee_name, job_title, location, email, phone_no, operator, timestamp>> get_calls_for_ticket(integer ticket_id)

array<string> get_hashtags()

array<hashmap<integer ticket_id, timestamp first_mentioned, string notes>> search_for_problems(string query)


FOR TYPEAHEAD:

array<string> suggestions_in_call(call_fields suggestions_for,
                                  string first_name, 
                                  string last_name, 
                                  string employee_id, 
                                  string phone_no, 
                                  string email, 
                                  string department, 
                                  string dept_code, 
                                  string job_title, 
                                  string country)
)

hashmap<string first_name,
        string last_name,
        string employee_id,
        string phone_no,
        string email,
        string department,
        string dept_code,
        string job_title,
        string country> autofill_call(hashmap<string first_name,
                                              string last_name,
                                              string employee_id, 
                                              string phone_no, 
                                              string email, 
                                              string department, 
                                              string dept_code, 
                                              string job_title, 
                                              string country>)
 * returns an employee record if the given information is enough to uniquely identify a person

array<string> suggestions_in_hardware(hardware_fields suggestions_for,
                                      string type, string make, 
                                      string model, 
                                      string serial_no)

hashmap<integer hardware_id,
        string type, 
        string make, 
        string model, 
        string serial_no> autofill_hardware(hashmap<string type,
                                                    string make, 
                                                    string model, 
                                                    string serial_no>)

array<string> suggestions_in_software(array<software_fields suggestions_for,
                                            string name, 
                                            string version, 
                                            string registration_no>)

hashmap<integer software_id,
        string name, 
        string version, 
        string registration_no> autofill_software(array<string name, 
                                                        string version, 
                                                        string registration_no>)

